@prefix s-wfc: <http://semantic-machines.com/veda/simple-workflow-cr/> .
@prefix s-wf: <http://semantic-machines.com/veda/simple-workflow/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix v-wf: <http://semantic-machines.com/veda/veda-workflow/> .
@prefix v-s: <http://semantic-machines.com/veda/veda-schema/> .
@prefix v-ui: <http://semantic-machines.com/veda/veda-ui/> .
@prefix td: <http://semantic-machines.com/veda/test-data/> .
@prefix d: <http://semantic-machines.com/veda/veda-data/>.
@prefix cfg: <http://semantic-machines.com/veda/cfg/> .

<http://semantic-machines.com/veda/interlayer-net>
  rdf:type owl:Ontology ;
  rdfs:label "Онтология бизнес процессов"@ru ;
  rdfs:label "Simple workflow ontology"@en ;
  rdfs:isDefinedBy s-wfc: ;
  v-s:loadPriority 21 ;
.

s-wf:adf43bae5-d0ce-62e4-5e11-e127df46ecc4
  a v-wf:Mapping;
  v-wf:mappingExpression """
     if (task_result.is_all_executors_taken_decision ('result', newUri ('v-wf:DecisionAgreed'))) {
       newUri('v-wf:DecisionAgreed');
     } else if (task_result.is_all_executors_taken_decision ('result', newUri ('v-wf:DecisionSign'))) {
       newUri('v-wf:DecisionSign');
     } else if (task_result.is_all_executors_taken_decision ('result', newUri ('v-wf:DecisionApprove'))) {
       newUri('v-wf:DecisionApprove');
     } else if (task_result.is_all_executors_taken_decision ('result', newUri ('v-wf:DecisionReview'))) {
       newUri('v-wf:DecisionReview');
     } else if (task_result.is_all_executors_taken_decision ('result', newUri ('v-wf:DecisionAchieved'))) {
       newUri('v-wf:DecisionAchieved');
     } else if (task_result.is_all_executors_taken_decision ('result', newUri ('v-wf:DecisionExamined'))) {
       newUri('v-wf:DecisionExamined');
     } else {
       newUri('v-wf:DecisionDeclined');
     }
  """;
  v-wf:mapToVariable s-wf:var_result;
  rdfs:label "map for s-wf:InterlayerNet_t";
.

s-wf:InterlayerNet
  a v-wf:Net;
  v-wf:inputVariable s-wf:var_doc_id, s-wf:var_journal_initiator;
  v-wf:consistsOf s-wf:InterlayerNet_ic, s-wf:InterlayerNet_oc, s-wf:InterlayerNet_t, s-wf:InterlayerNet_ic_to_t, s-wf:InterlayerNet_t_to_oc;
  v-wf:completedMapping s-wf:map_set_result_from_local, s-wf:map_set_result_decision_from_local;
  rdfs:label "прослойка для множествеенного запуска универсального маршрута"^^xsd:string.

s-wf:InterlayerNet_ic
  a v-wf:InputCondition;
  v-wf:hasFlow s-wf:InterlayerNet_ic_to_t;
  v-wf:locationX "-294"^^xsd:integer;
  v-wf:locationY "34"^^xsd:integer.

s-wf:InterlayerNet_oc
  a v-wf:OutputCondition;
  v-wf:locationX "429"^^xsd:integer;
  v-wf:locationY "-7"^^xsd:integer.

s-wf:InterlayerNet_t
  a v-wf:Task;
  v-wf:subNet s-wf:net_coordination;
  v-wf:split v-wf:None;
  v-wf:startingMapping s-wf:map_doc_id, s-wf:map_initiator, s-wf:InterlayerNet_task_action, s-wf:InterlayerNet_task_form_type, s-wf:InterlayerNet_task_comment, s-wf:InterlayerNet_task_date_to, s-wf:InterlayerNet_task_controller, s-wf:InterlayerNet_task_possible_decisions;
  v-wf:join v-wf:None;
  v-wf:completedMapping s-wf:adf43bae5-d0ce-62e4-5e11-e127df46ecc4;
  v-wf:executor s-wf:InterlayerNet_executor;
  v-wf:hasFlow s-wf:InterlayerNet_t_to_oc;
  v-wf:locationX "73"^^xsd:integer;
  rdfs:label "Выдача задач"^^xsd:string;
  v-wf:locationY "-12"^^xsd:integer;
  v-wf:startingJournalMap s-wf:map_jrn_msg_t3_b, s-wf:map_jrn_msg_t3_b_ev, s-wf:map_journal_doc_id, s-wf:map_journal_process_id;
  v-wf:completedJournalMap s-wf:map_journal_msg_4_task_label_complete, s-wf:map_jrn_ev_type_4_TaskCompleted, s-wf:map_journal_doc_id, s-wf:map_journal_process_id.

s-wf:InterlayerNet_ic_to_t
  a v-wf:Flow;
  v-wf:predicate "true"^^xsd:string;
  v-wf:flowsInto s-wf:InterlayerNet_t;
  rdfs:label ""^^xsd:string.

s-wf:InterlayerNet_t_to_oc
  a v-wf:Flow;
  v-wf:predicate "true"^^xsd:string;
  v-wf:flowsInto s-wf:InterlayerNet_oc;
  rdfs:label ""^^xsd:string.

s-wf:InterlayerNet_executor
  rdf:type v-wf:ExecutorDefinition ;
  v-wf:executorExpression
  """
    get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_participant'}])
  """;
  rdfs:label "Исполнители из формы решения пользователя"@ru.

s-wf:InterlayerNet_task_action
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable s-wf:var_actor_task_action ;
  v-wf:mappingExpression
  """
    get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_task_label'}])
  """;
.

s-wf:InterlayerNet_task_comment
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable s-wf:var_actor_task_comment ;
  v-wf:mappingExpression  "get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_comment'}])" ;
.

s-wf:InterlayerNet_task_date_to
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable s-wf:var_actor_task_date_to ;
  v-wf:mappingExpression  """
    (get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_deadlineDays'}]) && get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_deadlineDays'}])[0])?
  newDate(new Date(new Date().getTime()+(get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_deadlineDays'}])[0].data*24*60*60*1000))):
  get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_deadlineDate'}]);
  """ ;
.

s-wf:InterlayerNet_task_possible_decisions
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable s-wf:possible_decision ;
  v-wf:mappingExpression "eval(get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_possible_decisions'}])[0].data)" ;
  rdfs:label "Варианты ответа для исполнения"^^xsd:string;
.

s-wf:InterlayerNet_task_controller
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable s-wf:var_controller ;
  v-wf:mappingExpression  "get_properties_chain ( process.getExecutor(), [{$get:'s-wf:SimpleRouteStartForm_controller'}])" ;
.

s-wf:InterlayerNet_task_form_type
  rdf:type v-wf:Mapping ;
  v-wf:mapToVariable s-wf:var_decision_form_type ;
  v-wf:mappingExpression  "newUri ('s-wf:UserTaskForm')";
.

